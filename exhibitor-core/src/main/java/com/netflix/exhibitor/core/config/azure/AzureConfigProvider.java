package com.netflix.exhibitor.core.config.azure;

import com.microsoft.azure.storage.CloudStorageAccount;
import com.microsoft.azure.storage.StorageException;
import com.microsoft.azure.storage.blob.BlobInputStream;
import com.microsoft.azure.storage.blob.CloudBlobClient;
import com.microsoft.azure.storage.blob.CloudBlobContainer;
import com.microsoft.azure.storage.blob.CloudBlockBlob;
import com.netflix.exhibitor.core.config.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.security.InvalidKeyException;
import java.util.Date;
import java.util.Properties;

public class AzureConfigProvider implements ConfigProvider{

    private static final String CONFIG_BLOB_NAME = "config.properties";
    private final String connString;
    private final Properties defaults;
    private CloudBlobContainer container;
    private String containerName;

    public AzureConfigProvider(AzureClientConfig clientConfig, Properties defaults){
        this.defaults = defaults;
        connString = String.format("DefaultEndpointsProtocol=https;AccountName=%s;AccountKey=%s", clientConfig.getAzureAccountName(), clientConfig.getAzureAccountKey());
        this.containerName = clientConfig.getConfigContainer();
        try{
            start();
        }catch (Exception ex){
            throw new IllegalStateException(ex);
        }
    }

    @Override
    public void start() throws Exception {
        try {
            CloudStorageAccount account = CloudStorageAccount.parse(connString);
            CloudBlobClient blobClient = account.createCloudBlobClient();
            container = blobClient.getContainerReference(containerName);
            container.createIfNotExists();
        } catch (URISyntaxException e) {
            throw new IllegalStateException(e);
        } catch (InvalidKeyException e) {
            throw new IllegalStateException(e);
        } catch (StorageException e) {
            throw new IllegalStateException(e);
        }
    }

    @Override
    public LoadedInstanceConfig loadConfig() throws Exception {
        Date lastModified;
        Properties properties = new Properties();
        CloudBlockBlob blob = container.getBlockBlobReference(CONFIG_BLOB_NAME);

        if(blob.exists()){
            lastModified = blob.getProperties().getLastModified();
            BlobInputStream inStream = blob.openInputStream();
            try {
                properties.load(inStream);
            }finally {
                inStream.close();
            }
        }else {
            lastModified = new Date(0L);
        }
        PropertyBasedInstanceConfig instanceConfig = new PropertyBasedInstanceConfig(properties, defaults);
        return new LoadedInstanceConfig(instanceConfig, lastModified.getTime());
    }

    @Override
    public LoadedInstanceConfig storeConfig(ConfigCollection config, long compareVersion) throws Exception {
        Date lastModified;
        CloudBlockBlob blob = container.getBlockBlobReference(CONFIG_BLOB_NAME);

        if (blob.exists()) {
            lastModified = blob.getProperties().getLastModified();
            if (lastModified.getTime() != compareVersion){
                return null;
            }
        }

        PropertyBasedInstanceConfig instanceConfig = new PropertyBasedInstanceConfig(config);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        instanceConfig.getProperties().store(out, "Auto-generated by Exhibitor");
        byte[] bytes = out.toByteArray();
        blob.uploadFromByteArray(bytes, 0, bytes.length);
        lastModified = blob.getProperties().getLastModified();

        return new LoadedInstanceConfig(instanceConfig, lastModified.getTime());
    }

    @Override
    public PseudoLock newPseudoLock() throws Exception {
        return new AzurePseudoLock(container);
    }

    @Override
    public void close() throws IOException {
        //NOOP
    }
}
